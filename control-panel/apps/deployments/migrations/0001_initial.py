# Generated by Django 5.0.1 on 2025-10-19 18:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseDeployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Unique deployment name (used for systemd service, nginx config)', max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('building', 'Building'), ('running', 'Running'), ('stopped', 'Stopped'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('port', models.IntegerField(blank=True, help_text='Allocated port for this deployment', null=True, unique=True)),
                ('domain', models.CharField(blank=True, help_text='Custom domain for this deployment', max_length=255)),
                ('deployed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Base Deployment',
                'verbose_name_plural': 'Base Deployments',
                'db_table': 'base_deployments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationDeployment',
            fields=[
                ('basedeployment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='deployments.basedeployment')),
                ('project_type', models.CharField(choices=[('django', 'Django'), ('laravel', 'Laravel'), ('wordpress', 'WordPress'), ('static', 'Static Site'), ('nodejs', 'Node.js'), ('python', 'Python')], default='django', max_length=20)),
                ('repo_url', models.URLField(max_length=500, validators=[django.core.validators.URLValidator()])),
                ('branch', models.CharField(default='main', max_length=100)),
                ('env_vars', models.JSONField(blank=True, default=dict)),
                ('use_docker', models.BooleanField(default=False)),
                ('dockerfile_path', models.CharField(blank=True, default='Dockerfile', max_length=255)),
                ('docker_compose_path', models.CharField(blank=True, default='docker-compose.yml', max_length=255)),
                ('docker_image_name', models.CharField(blank=True, max_length=255)),
                ('docker_build_args', models.JSONField(blank=True, default=dict)),
                ('docker_env_vars', models.JSONField(blank=True, default=dict)),
                ('docker_volumes', models.JSONField(blank=True, default=list)),
                ('docker_ports', models.JSONField(blank=True, default=list)),
                ('docker_network_mode', models.CharField(blank=True, choices=[('bridge', 'Bridge'), ('host', 'Host'), ('none', 'None')], default='bridge', max_length=50)),
                ('auto_generate_dockerfile', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Application Deployment',
                'verbose_name_plural': 'Application Deployments',
                'db_table': 'application_deployments',
                'ordering': ['-created_at'],
            },
            bases=('deployments.basedeployment',),
        ),
        migrations.CreateModel(
            name='LLMDeployment',
            fields=[
                ('basedeployment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='deployments.basedeployment')),
                ('model_name', models.CharField(max_length=255)),
                ('tensor_parallel_size', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('gpu_memory_utilization', models.FloatField(default=0.9, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('max_model_len', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('quantization', models.CharField(blank=True, choices=[('', 'None'), ('awq', 'AWQ'), ('gptq', 'GPTQ'), ('squeezellm', 'SqueezeLLM')], max_length=20)),
                ('dtype', models.CharField(choices=[('auto', 'Auto'), ('float16', 'Float16'), ('bfloat16', 'BFloat16'), ('float32', 'Float32')], default='auto', max_length=20)),
                ('vllm_args', models.JSONField(blank=True, default=dict)),
                ('model_size_gb', models.FloatField(blank=True, null=True)),
                ('download_completed', models.BooleanField(default=False)),
                ('enable_trust_remote_code', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'LLM Deployment',
                'verbose_name_plural': 'LLM Deployments',
                'db_table': 'llm_deployments',
                'ordering': ['-created_at'],
            },
            bases=('deployments.basedeployment',),
        ),
        migrations.CreateModel(
            name='Deployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('repo_url', models.URLField(max_length=500)),
                ('branch', models.CharField(default='main', max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('building', 'Building'), ('running', 'Running'), ('stopped', 'Stopped'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('project_type', models.CharField(choices=[('django', 'Django'), ('static', 'Static Site'), ('llm', 'LLM Model (vLLM)')], default='django', max_length=20)),
                ('port', models.IntegerField(blank=True, null=True, unique=True)),
                ('domain', models.CharField(blank=True, max_length=255)),
                ('env_vars', models.JSONField(blank=True, default=dict)),
                ('model_name', models.CharField(blank=True, help_text='HuggingFace model ID (e.g., meta-llama/Llama-2-7b-chat-hf)', max_length=255)),
                ('tensor_parallel_size', models.IntegerField(default=1, help_text='Number of GPUs for tensor parallelism')),
                ('gpu_memory_utilization', models.FloatField(default=0.9, help_text='GPU memory utilization (0.0-1.0)')),
                ('max_model_len', models.IntegerField(blank=True, help_text='Maximum model context length', null=True)),
                ('quantization', models.CharField(blank=True, choices=[('', 'None'), ('awq', 'AWQ'), ('gptq', 'GPTQ'), ('squeezellm', 'SqueezeLLM')], help_text='Model quantization method', max_length=20)),
                ('dtype', models.CharField(choices=[('auto', 'Auto'), ('float16', 'Float16'), ('bfloat16', 'BFloat16'), ('float32', 'Float32')], default='auto', help_text='Model data type', max_length=20)),
                ('use_docker', models.BooleanField(default=False, help_text='Deploy using Docker containerization')),
                ('dockerfile_path', models.CharField(blank=True, default='Dockerfile', help_text='Path to Dockerfile relative to repository root', max_length=255)),
                ('docker_compose_path', models.CharField(blank=True, default='docker-compose.yml', help_text='Path to docker-compose.yml relative to repository root', max_length=255)),
                ('docker_image_name', models.CharField(blank=True, help_text='Custom Docker image name (auto-generated if empty)', max_length=255)),
                ('docker_build_args', models.JSONField(blank=True, default=dict, help_text='Docker build arguments as key-value pairs')),
                ('docker_env_vars', models.JSONField(blank=True, default=dict, help_text='Docker container environment variables')),
                ('docker_volumes', models.JSONField(blank=True, default=list, help_text='Docker volume mounts as list of {"host": "path", "container": "path"}')),
                ('docker_ports', models.JSONField(blank=True, default=list, help_text='Additional Docker port mappings as list of {"host": port, "container": port}')),
                ('docker_network_mode', models.CharField(blank=True, choices=[('bridge', 'Bridge'), ('host', 'Host'), ('none', 'None')], default='bridge', help_text='Docker network mode', max_length=50)),
                ('auto_generate_dockerfile', models.BooleanField(default=False, help_text='Automatically generate Dockerfile if not present in repository')),
                ('deployed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legacy_deployments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Deployment (Legacy)',
                'verbose_name_plural': 'Deployments (Legacy)',
                'db_table': 'deployments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeploymentLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('success', 'Success')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='deployments.basedeployment')),
            ],
            options={
                'verbose_name': 'Deployment Log',
                'verbose_name_plural': 'Deployment Logs',
                'db_table': 'deployment_logs',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthCheckRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('overall_healthy', models.BooleanField(default=True)),
                ('process_healthy', models.BooleanField(default=True)),
                ('http_healthy', models.BooleanField(default=True)),
                ('resources_healthy', models.BooleanField(default=True)),
                ('disk_healthy', models.BooleanField(default=True)),
                ('cpu_percent', models.FloatField(blank=True, null=True)),
                ('memory_mb', models.FloatField(blank=True, null=True)),
                ('disk_free_gb', models.FloatField(blank=True, null=True)),
                ('response_time_ms', models.FloatField(blank=True, null=True)),
                ('http_status_code', models.IntegerField(blank=True, null=True)),
                ('results', models.JSONField(default=dict)),
                ('auto_restart_attempted', models.BooleanField(default=False)),
                ('auto_restart_successful', models.BooleanField(blank=True, null=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_check_records', to='deployments.basedeployment')),
            ],
            options={
                'verbose_name': 'Health Check Record',
                'verbose_name_plural': 'Health Check Records',
                'db_table': 'health_check_records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='basedeployment',
            index=models.Index(fields=['name'], name='base_deploy_name_fed43a_idx'),
        ),
        migrations.AddIndex(
            model_name='basedeployment',
            index=models.Index(fields=['status'], name='base_deploy_status_64ac37_idx'),
        ),
        migrations.AddIndex(
            model_name='basedeployment',
            index=models.Index(fields=['deployed_by', '-created_at'], name='base_deploy_deploye_9bbaac_idx'),
        ),
        migrations.AddIndex(
            model_name='deploymentlog',
            index=models.Index(fields=['deployment', '-created_at'], name='deployment__deploym_ecb7ea_idx'),
        ),
        migrations.AddIndex(
            model_name='deploymentlog',
            index=models.Index(fields=['level', '-created_at'], name='deployment__level_2a9340_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcheckrecord',
            index=models.Index(fields=['deployment', '-created_at'], name='health_chec_deploym_17e27d_idx'),
        ),
        migrations.AddIndex(
            model_name='healthcheckrecord',
            index=models.Index(fields=['overall_healthy', '-created_at'], name='health_chec_overall_d99548_idx'),
        ),
    ]
