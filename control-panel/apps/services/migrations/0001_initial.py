# Generated by Django 5.0.1 on 2025-10-19 18:31

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('deployments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.URLField()),
                ('status_code', models.IntegerField()),
                ('response_time_ms', models.IntegerField()),
                ('is_healthy', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_checks', to='deployments.deployment')),
            ],
            options={
                'verbose_name': 'Health Check',
                'verbose_name_plural': 'Health Checks',
                'db_table': 'health_checks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ResourceUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cpu_percent', models.FloatField()),
                ('memory_percent', models.FloatField()),
                ('memory_used_mb', models.IntegerField()),
                ('memory_total_mb', models.IntegerField()),
                ('disk_percent', models.FloatField()),
                ('disk_used_gb', models.FloatField()),
                ('disk_total_gb', models.FloatField()),
                ('network_sent_mb', models.FloatField(default=0.0)),
                ('network_recv_mb', models.FloatField(default=0.0)),
                ('active_connections', models.IntegerField(default=0)),
                ('load_average_1m', models.FloatField(default=0.0)),
                ('load_average_5m', models.FloatField(default=0.0)),
                ('load_average_15m', models.FloatField(default=0.0)),
            ],
            options={
                'verbose_name': 'Resource Usage',
                'verbose_name_plural': 'Resource Usage',
                'db_table': 'resource_usage',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='resource_us_created_7cda08_idx')],
            },
        ),
        migrations.CreateModel(
            name='RestartPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_type', models.CharField(choices=[('always', 'Always Restart'), ('on_failure', 'Restart on Failure'), ('never', 'Never Auto-Restart'), ('backoff', 'Exponential Backoff')], default='on_failure', max_length=20)),
                ('enabled', models.BooleanField(default=True)),
                ('max_restarts', models.IntegerField(default=3, help_text='Maximum restart attempts within time window')),
                ('time_window_minutes', models.IntegerField(default=15, help_text='Time window for counting restart attempts')),
                ('initial_delay_seconds', models.IntegerField(default=10, help_text='Initial delay before first restart')),
                ('max_delay_seconds', models.IntegerField(default=300, help_text='Maximum delay between restarts (5 minutes)')),
                ('backoff_multiplier', models.FloatField(default=2.0, help_text='Multiplier for exponential backoff')),
                ('cooldown_minutes', models.IntegerField(default=5, help_text='Cooldown period after max restarts exceeded')),
                ('require_health_check', models.BooleanField(default=True, help_text='Only restart if health check confirms failure')),
                ('health_check_retries', models.IntegerField(default=3, help_text='Number of health check failures before restart')),
                ('notify_on_restart', models.BooleanField(default=True)),
                ('notify_on_max_restarts', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deployment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='restart_policy', to='deployments.deployment')),
            ],
            options={
                'verbose_name': 'Restart Policy',
                'verbose_name_plural': 'Restart Policies',
                'db_table': 'restart_policies',
            },
        ),
        migrations.CreateModel(
            name='ServiceStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('running', 'Running'), ('stopped', 'Stopped'), ('failed', 'Failed'), ('starting', 'Starting'), ('stopping', 'Stopping')], default='stopped', max_length=20)),
                ('pid', models.IntegerField(blank=True, null=True)),
                ('memory_mb', models.FloatField(default=0.0)),
                ('cpu_percent', models.FloatField(default=0.0)),
                ('uptime_seconds', models.IntegerField(default=0)),
                ('restart_count', models.IntegerField(default=0)),
                ('last_checked', models.DateTimeField(auto_now=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_statuses', to='deployments.deployment')),
            ],
            options={
                'verbose_name': 'Service Status',
                'verbose_name_plural': 'Service Statuses',
                'db_table': 'service_status',
                'ordering': ['-last_checked'],
            },
        ),
        migrations.CreateModel(
            name='SSLConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ssl_enabled', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('disabled', 'Disabled'), ('enabled', 'Enabled'), ('expiring', 'Expiring Soon'), ('expired', 'Expired'), ('invalid', 'Invalid Certificate')], default='disabled', max_length=20)),
                ('certificate_type', models.CharField(choices=[('self_signed', 'Self-Signed'), ('lets_encrypt', "Let's Encrypt"), ('custom', 'Custom Certificate'), ('wildcard', 'Wildcard Certificate')], default='self_signed', max_length=20)),
                ('domain', models.CharField(blank=True, max_length=255)),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='ssl/certificates/')),
                ('private_key_file', models.FileField(blank=True, null=True, upload_to='ssl/private_keys/')),
                ('certificate_chain_file', models.FileField(blank=True, null=True, upload_to='ssl/chains/')),
                ('certificate_expires_at', models.DateTimeField(blank=True, null=True)),
                ('certificate_issuer', models.CharField(blank=True, max_length=255)),
                ('certificate_subject', models.CharField(blank=True, max_length=255)),
                ('encryption_protocol', models.CharField(choices=[('TLSv1.3', 'TLS 1.3'), ('TLSv1.2', 'TLS 1.2'), ('TLSv1.1', 'TLS 1.1'), ('TLSv1.0', 'TLS 1.0')], default='TLSv1.3', max_length=20)),
                ('cipher_suite', models.CharField(default='ECDHE-RSA-AES256-GCM-SHA384', help_text='SSL cipher suite configuration', max_length=50)),
                ('hsts_enabled', models.BooleanField(default=True, help_text='HTTP Strict Transport Security')),
                ('hsts_max_age', models.IntegerField(default=31536000, help_text='HSTS max-age in seconds')),
                ('auto_redirect_http', models.BooleanField(default=True, help_text='Automatically redirect HTTP to HTTPS')),
                ('validation_error', models.TextField(blank=True)),
                ('last_validation_at', models.DateTimeField(blank=True, null=True)),
                ('lets_encrypt_email', models.EmailField(blank=True, max_length=254)),
                ('auto_renew', models.BooleanField(default=True)),
                ('renewal_days_before', models.IntegerField(default=30)),
                ('deployment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ssl_config', to='deployments.deployment')),
            ],
            options={
                'verbose_name': 'SSL Configuration',
                'verbose_name_plural': 'SSL Configurations',
                'db_table': 'ssl_configurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alert_type', models.CharField(choices=[('cpu_high', 'High CPU Usage'), ('memory_high', 'High Memory Usage'), ('disk_high', 'High Disk Usage'), ('service_down', 'Service Down'), ('deployment_failed', 'Deployment Failed'), ('ssl_expiring', 'SSL Certificate Expiring'), ('database_error', 'Database Error')], max_length=50)),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('is_acknowledged', models.BooleanField(default=False)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('deployment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='deployments.deployment')),
            ],
            options={
                'verbose_name': 'Alert',
                'verbose_name_plural': 'Alerts',
                'db_table': 'alerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='alerts_created_6327ec_idx'), models.Index(fields=['is_acknowledged'], name='alerts_is_ackn_a32cbc_idx'), models.Index(fields=['severity'], name='alerts_severit_362484_idx')],
            },
        ),
        migrations.CreateModel(
            name='RestartAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt_number', models.IntegerField()),
                ('delay_seconds', models.IntegerField()),
                ('reason', models.CharField(max_length=255)),
                ('success', models.BooleanField()),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField()),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restart_attempts', to='deployments.deployment')),
                ('policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.restartpolicy')),
            ],
            options={
                'verbose_name': 'Restart Attempt',
                'verbose_name_plural': 'Restart Attempts',
                'db_table': 'restart_attempts',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['deployment', '-started_at'], name='restart_att_deploym_0deddf_idx')],
            },
        ),
    ]
