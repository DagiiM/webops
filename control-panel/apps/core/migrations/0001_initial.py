# Generated by Django 5.0.1 on 2025-10-19 18:31

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('deployments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BrandingSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(default='WebOps', help_text='Name displayed in browser title and header', max_length=100)),
                ('logo', models.ImageField(blank=True, help_text='Logo image (recommended: 200x50px, PNG with transparency)', null=True, upload_to='branding/logos/')),
                ('favicon', models.ImageField(blank=True, help_text='Favicon (recommended: 32x32px or 64x64px, PNG/ICO)', null=True, upload_to='branding/favicons/')),
                ('primary_hue', models.IntegerField(default=217, help_text='Primary color hue (0-360 degrees)')),
                ('primary_saturation', models.IntegerField(default=91, help_text='Primary color saturation (0-100%)')),
                ('primary_lightness', models.IntegerField(default=60, help_text='Primary color lightness (0-100%)')),
                ('primary_color', models.CharField(default='#3b82f6', help_text='Primary brand color (hex format: #RRGGBB) - auto-generated from HSL', max_length=7)),
                ('secondary_color', models.CharField(default='#1e40af', help_text='Secondary brand color (hex format: #RRGGBB) - auto-generated', max_length=7)),
                ('accent_color', models.CharField(default='#10b981', help_text='Accent color for success states (hex format: #RRGGBB)', max_length=7)),
                ('header_bg_color', models.CharField(default='#1f2937', help_text='Header background color (hex format: #RRGGBB)', max_length=7)),
                ('color_harmony', models.CharField(choices=[('monochromatic', 'Monochromatic'), ('complementary', 'Complementary'), ('triadic', 'Triadic'), ('analogous', 'Analogous'), ('split_complementary', 'Split Complementary')], default='monochromatic', help_text='Color harmony scheme for palette generation', max_length=20)),
                ('generated_palette', models.JSONField(blank=True, default=dict, help_text='Auto-generated color palette with semantic names and variants')),
                ('enforce_wcag_aa', models.BooleanField(default=True, help_text='Enforce WCAG AA contrast ratios (4.5:1 for normal text)')),
                ('enforce_wcag_aaa', models.BooleanField(default=False, help_text='Enforce WCAG AAA contrast ratios (7:1 for normal text)')),
                ('supports_dark_mode', models.BooleanField(default=True, help_text='Generate dark mode color variants')),
                ('theme_preset', models.CharField(choices=[('custom', 'Custom'), ('forest', 'Forest Theme'), ('ocean', 'Ocean Theme'), ('dark', 'Dark Theme'), ('premium', 'Premium/High Contrast')], default='custom', help_text='Predefined theme preset or custom configuration', max_length=20)),
                ('font_family_primary', models.CharField(default='"Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif', help_text='Primary font family for UI text', max_length=200)),
                ('font_family_mono', models.CharField(default='"JetBrains Mono", "Fira Code", Consolas, "Liberation Mono", Menlo, Courier, monospace', help_text='Monospace font family for code and technical text', max_length=200)),
                ('font_size_base', models.FloatField(default=1.0, help_text='Base font size multiplier (1.0 = 16px, 1.125 = 18px)')),
                ('font_weight_normal', models.IntegerField(default=400, help_text='Normal text weight (300-900)')),
                ('font_weight_medium', models.IntegerField(default=500, help_text='Medium text weight (300-900)')),
                ('font_weight_bold', models.IntegerField(default=700, help_text='Bold text weight (300-900)')),
                ('line_height_tight', models.FloatField(default=1.25, help_text='Tight line height for headings')),
                ('line_height_normal', models.FloatField(default=1.5, help_text='Normal line height for body text')),
                ('line_height_relaxed', models.FloatField(default=1.625, help_text='Relaxed line height for long-form content')),
                ('spacing_base_unit', models.IntegerField(default=8, help_text='Base spacing unit in pixels (typically 4px or 8px)')),
                ('container_padding_desktop', models.IntegerField(default=24, help_text='Container padding for desktop (px)')),
                ('container_padding_mobile', models.IntegerField(default=16, help_text='Container padding for mobile (px)')),
                ('component_spacing_compact', models.IntegerField(default=12, help_text='Compact spacing between components (px)')),
                ('component_spacing_normal', models.IntegerField(default=24, help_text='Normal spacing between components (px)')),
                ('component_spacing_relaxed', models.IntegerField(default=48, help_text='Relaxed spacing between components (px)')),
                ('border_radius_small', models.IntegerField(default=4, help_text='Small border radius (px)')),
                ('border_radius_medium', models.IntegerField(default=8, help_text='Medium border radius (px)')),
                ('border_radius_large', models.IntegerField(default=16, help_text='Large border radius (px)')),
                ('shadow_intensity', models.IntegerField(default=10, help_text='Shadow intensity percentage (0-100)')),
                ('shadow_blur_small', models.IntegerField(default=6, help_text='Small shadow blur amount (px)')),
                ('shadow_blur_medium', models.IntegerField(default=15, help_text='Medium shadow blur amount (px)')),
                ('shadow_blur_large', models.IntegerField(default=25, help_text='Large shadow blur amount (px)')),
                ('enable_themed_shadows', models.BooleanField(default=True, help_text='Use primary color for accent shadows')),
                ('animation_duration_fast', models.IntegerField(default=150, help_text='Fast animation duration (ms)')),
                ('animation_duration_normal', models.IntegerField(default=200, help_text='Normal animation duration (ms)')),
                ('animation_duration_slow', models.IntegerField(default=300, help_text='Slow animation duration (ms)')),
                ('animation_easing', models.CharField(choices=[('linear', 'Linear'), ('ease', 'Ease'), ('ease-in', 'Ease In'), ('ease-out', 'Ease Out'), ('ease-in-out', 'Ease In Out'), ('cubic-bezier(0.4, 0, 0.2, 1)', 'Material Design'), ('cubic-bezier(0.68, -0.55, 0.265, 1.55)', 'Bounce')], default='cubic-bezier(0.4, 0, 0.2, 1)', help_text='Animation easing function', max_length=50)),
                ('respect_reduced_motion', models.BooleanField(default=True, help_text='Respect user preference for reduced motion')),
                ('header_height_desktop', models.IntegerField(default=64, help_text='Header height on desktop (px)')),
                ('header_height_mobile', models.IntegerField(default=56, help_text='Header height on mobile (px)')),
                ('sidebar_width_desktop', models.IntegerField(default=256, help_text='Sidebar width on desktop (px)')),
                ('sidebar_width_collapsed', models.IntegerField(default=64, help_text='Collapsed sidebar width (px)')),
                ('content_max_width', models.IntegerField(default=1280, help_text='Maximum content width (px)')),
                ('input_height_small', models.IntegerField(default=32, help_text='Small input height (px)')),
                ('input_height_medium', models.IntegerField(default=40, help_text='Medium input height (px)')),
                ('input_height_large', models.IntegerField(default=48, help_text='Large input height (px)')),
                ('button_height_small', models.IntegerField(default=32, help_text='Small button height (px)')),
                ('button_height_medium', models.IntegerField(default=40, help_text='Medium button height (px)')),
                ('button_height_large', models.IntegerField(default=48, help_text='Large button height (px)')),
                ('hover_opacity', models.FloatField(default=0.8, help_text='Opacity for hover states (0.0-1.0)')),
                ('hover_scale', models.FloatField(default=1.02, help_text='Scale transform for hover states (0.5-2.0)')),
                ('focus_ring_width', models.IntegerField(default=2, help_text='Focus ring width (px)')),
                ('focus_ring_offset', models.IntegerField(default=2, help_text='Focus ring offset (px)')),
                ('active_scale', models.FloatField(default=0.98, help_text='Scale transform for active/pressed states (0.5-2.0)')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Branding Settings',
                'verbose_name_plural': 'Branding Settings',
                'db_table': 'core_branding_settings',
            },
        ),
        migrations.CreateModel(
            name='SSLCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.CharField(max_length=255, unique=True)),
                ('issued_at', models.DateTimeField()),
                ('expires_at', models.DateTimeField()),
                ('auto_renew', models.BooleanField(default=True)),
                ('last_renewal_attempt', models.DateTimeField(blank=True, null=True)),
                ('renewal_failed_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expiring_soon', 'Expiring Soon'), ('expired', 'Expired'), ('renewal_failed', 'Renewal Failed')], default='active', max_length=20)),
            ],
            options={
                'verbose_name': 'SSL Certificate',
                'verbose_name_plural': 'SSL Certificates',
                'db_table': 'core_ssl_certificate',
            },
        ),
        migrations.CreateModel(
            name='SystemHealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cpu_percent', models.FloatField()),
                ('memory_percent', models.FloatField()),
                ('memory_used_mb', models.IntegerField()),
                ('memory_total_mb', models.IntegerField()),
                ('disk_percent', models.FloatField()),
                ('disk_used_gb', models.FloatField()),
                ('disk_total_gb', models.FloatField()),
                ('active_deployments', models.IntegerField()),
                ('failed_deployments', models.IntegerField()),
                ('is_healthy', models.BooleanField(default=True)),
                ('issues', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'System Health Check',
                'verbose_name_plural': 'System Health Checks',
                'db_table': 'core_system_health_check',
            },
        ),
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(help_text='Configuration key (e.g., google_oauth_client_id)', max_length=100, unique=True)),
                ('value', models.TextField(blank=True, help_text='Configuration value (encrypted for sensitive data)')),
                ('config_type', models.CharField(choices=[('oauth', 'OAuth Configuration'), ('integration', 'Integration Settings'), ('system', 'System Settings'), ('notification', 'Notification Settings'), ('security', 'Security Settings')], default='system', help_text='Type of configuration', max_length=20)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Whether this value should be encrypted')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('description', models.TextField(blank=True, help_text='Description of what this configuration does')),
                ('default_value', models.TextField(blank=True, help_text='Default value if not set')),
            ],
            options={
                'verbose_name': 'Configuration',
                'verbose_name_plural': 'Configurations',
                'db_table': 'core_configuration',
                'indexes': [models.Index(fields=['key'], name='core_config_key_5c7444_idx'), models.Index(fields=['config_type', 'is_active'], name='core_config_config__9cf59c_idx')],
            },
        ),
        migrations.CreateModel(
            name='GitHubConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('github_user_id', models.IntegerField(unique=True)),
                ('username', models.CharField(max_length=100)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(blank=True, max_length=255)),
                ('token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('scopes', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='github_connection', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'GitHub Connection',
                'verbose_name_plural': 'GitHub Connections',
                'db_table': 'core_github_connection',
            },
        ),
        migrations.CreateModel(
            name='GoogleConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_user_id', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('name', models.CharField(blank=True, max_length=150)),
                ('access_token', models.CharField(max_length=500)),
                ('refresh_token', models.CharField(blank=True, max_length=500)),
                ('id_token', models.CharField(blank=True, max_length=1024)),
                ('token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('scopes', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('last_validation_error', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='google_connection', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Google Connection',
                'verbose_name_plural': 'Google Connections',
                'db_table': 'core_google_connection',
            },
        ),
        migrations.CreateModel(
            name='HuggingFaceConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('access_token', models.CharField(max_length=500)),
                ('token_type', models.CharField(choices=[('read', 'Read-only'), ('write', 'Write'), ('fine-grained', 'Fine-grained')], default='read', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('last_validation_error', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='huggingface_connection', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Hugging Face Connection',
                'verbose_name_plural': 'Hugging Face Connections',
                'db_table': 'core_huggingface_connection',
            },
        ),
        migrations.CreateModel(
            name='NotificationChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('webhook', 'Webhook URL'), ('smtp', 'SMTP Email')], default='email', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('failed', 'Failed')], default='active', max_length=20)),
                ('config', models.JSONField(default=dict, help_text='Channel configuration (email address, webhook URL, SMTP settings, etc.)')),
                ('notify_on_deploy_success', models.BooleanField(default=True)),
                ('notify_on_deploy_failure', models.BooleanField(default=True)),
                ('notify_on_deploy_start', models.BooleanField(default=False)),
                ('notify_on_health_check_fail', models.BooleanField(default=True)),
                ('notify_on_resource_warning', models.BooleanField(default=False)),
                ('last_notification', models.DateTimeField(blank=True, null=True)),
                ('notification_count', models.IntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_channels', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Channel',
                'verbose_name_plural': 'Notification Channels',
                'db_table': 'core_notification_channel',
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('event_type', models.CharField(max_length=50)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('error_message', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.notificationchannel')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'db_table': 'core_notification_log',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('login_success', 'Login Success'), ('login_failed', 'Login Failed'), ('logout', 'Logout'), ('password_change', 'Password Changed'), ('2fa_enabled', '2FA Enabled'), ('2fa_disabled', '2FA Disabled'), ('2fa_success', '2FA Success'), ('2fa_failed', '2FA Failed'), ('token_created', 'API Token Created'), ('token_revoked', 'API Token Revoked'), ('deployment_created', 'Deployment Created'), ('deployment_deleted', 'Deployment Deleted'), ('database_accessed', 'Database Credentials Accessed'), ('suspicious_activity', 'Suspicious Activity'), ('unauthorized_access', 'Unauthorized Access Attempt')], max_length=50)),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='security_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Audit Log',
                'verbose_name_plural': 'Security Audit Logs',
                'db_table': 'core_security_audit_log',
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret', models.CharField(max_length=32, unique=True)),
                ('is_enabled', models.BooleanField(default=False)),
                ('backup_codes', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_factor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '2FA Setting',
                'verbose_name_plural': '2FA Settings',
                'db_table': 'core_two_factor_auth',
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('trigger_event', models.CharField(choices=[('push', 'Push to Branch'), ('pull_request', 'Pull Request'), ('release', 'Release Created'), ('manual', 'Manual Trigger')], default='push', max_length=20)),
                ('branch_filter', models.CharField(blank=True, help_text='Only trigger for specific branch (empty = all branches)', max_length=100)),
                ('secret', models.CharField(max_length=64, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('failed', 'Failed')], default='active', max_length=20)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('trigger_count', models.IntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='deployments.deployment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Webhook',
                'verbose_name_plural': 'Webhooks',
                'db_table': 'core_webhook',
            },
        ),
        migrations.CreateModel(
            name='WebhookDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('payload', models.JSONField(default=dict)),
                ('response', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('triggered_by', models.CharField(blank=True, max_length=100)),
                ('webhook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='core.webhook')),
            ],
            options={
                'verbose_name': 'Webhook Delivery',
                'verbose_name_plural': 'Webhook Deliveries',
                'db_table': 'core_webhook_delivery',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='notificationchannel',
            index=models.Index(fields=['user', '-created_at'], name='core_notifi_user_id_f91bca_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationchannel',
            index=models.Index(fields=['is_active', 'status'], name='core_notifi_is_acti_e9e979_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['-created_at'], name='core_securi_created_b91357_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['event_type'], name='core_securi_event_t_ffa2cd_idx'),
        ),
        migrations.AddIndex(
            model_name='securityauditlog',
            index=models.Index(fields=['severity'], name='core_securi_severit_6ed0a6_idx'),
        ),
        migrations.AddIndex(
            model_name='webhook',
            index=models.Index(fields=['secret'], name='core_webhoo_secret_94f437_idx'),
        ),
        migrations.AddIndex(
            model_name='webhook',
            index=models.Index(fields=['deployment', '-created_at'], name='core_webhoo_deploym_55076c_idx'),
        ),
    ]
