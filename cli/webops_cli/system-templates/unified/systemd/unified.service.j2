# Unified systemd service for {{ app_name }}
# Generated by WebOps - handles different service types through parameters

[Unit]
Description={{ app_name }} - {{ service_description|default("WebOps Deployment") }}
After=network.target {{ after_services|default("postgresql.service") }}
{% if wants_services %}Wants={{ wants_services }}{% endif %}

[Service]
Type={{ service_type|default("simple") }}
User={{ webops_user }}
Group={{ webops_user|default(webops_user) }}
WorkingDirectory={{ working_directory|default(repo_path) }}

# Environment Variables
Environment="PATH={{ venv_path }}/bin:/usr/local/bin:/usr/bin:/bin"
{% if python_path %}Environment="PATH={{ python_path }}:/usr/local/bin:/usr/bin:/bin"{% endif %}
{% if app_env_vars %}
{% for key, value in app_env_vars.items() %}
Environment="{{ key }}={{ value }}"
{% endfor %}
{% else %}
{% for key, value in env_vars.items() %}
Environment="{{ key }}={{ value }}"
{% endfor %}
{% endif %}

# Service-specific environment variables
{% if service_type_name == 'vllm' %}
Environment="HF_HOME={{ model_cache_path|default('/tmp') }}"
Environment="TRANSFORMERS_CACHE={{ model_cache_path|default('/tmp') }}"
{% if service_subtype == 'cpu' %}
Environment="VLLM_TARGET_DEVICE=cpu"
Environment="CMAKE_DISABLE_FIND_PACKAGE_CUDA=ON"
{% endif %}
Environment="VLLM_LOGGING_LEVEL={{ logging_level|default('info') }}"
{% elif service_type_name == 'docker' %}
# Docker-specific environment would go here
{% endif %}

# Command execution based on service type
{% if service_type_name == 'vllm' %}
ExecStart={{ python_path|default(venv_path + '/bin/python') }} -m vllm.entrypoints.openai.api_server {{ vllm_args|default('') }}
{% elif service_type_name == 'django' or service_type_name == 'general' %}
ExecStart={{ venv_path }}/bin/gunicorn \
    --bind 127.0.0.1:{{ port }} \
    --workers {{ workers|default(2) }} \
    {% if extra_gunicorn_args %}{{ extra_gunicorn_args }} \
    {% endif %}--timeout 60 \
    --access-logfile {{ log_path }}/access.log \
    --error-logfile {{ log_path }}/error.log \
    --log-level info \
    {{ app_module|default('wsgi:application') }}
{% elif service_type_name == 'docker' %}
ExecStartPre=-/usr/bin/docker stop webops-{{ app_name }}
ExecStartPre=-/usr/bin/docker rm webops-{{ app_name }}
ExecStart=/usr/bin/docker run -d \
    --name webops-{{ app_name }} \
    --restart unless-stopped \
    --network {{ network_mode|default('bridge') }} \
    -p {{ port }}:{{ port }} \
    {% for key, value in env_vars.items() %}-e {{ key }}="{{ value }}" \
    {% endfor %}-e PORT={{ port }} \
    {% for volume in (volumes|default([])) %}-v {{ volume.host }}:{{ volume.container }} \
    {% endfor %}{% for port_map in (additional_ports|default([])) %}-p {{ port_map.host }}:{{ port_map.container }} \
    {% endfor %}{{ image_name }}
ExecStop=/usr/bin/docker stop webops-{{ app_name }}
{% endif %}

# Logging
{% if service_type_name == 'vllm' %}
StandardOutput=append:{{ log_path }}/vllm.log
StandardError=append:{{ log_path }}/vllm-error.log
{% else %}
{% if log_path %}
StandardOutput=journal
StandardError=journal
{% endif %}
{% endif %}

# Restart policy
Restart={{ restart_policy|default("always") }}
RestartSec={{ restart_sec|default("5") }}

# Security
{% if security_enabled|default(true) %}
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths={{ repo_path|default('/tmp') }} {{ log_path|default('/tmp') }}
{% endif %}

# Resource limits (if needed)
{% if resource_limits %}
{% for limit, value in resource_limits.items() %}
{{ limit }}={{ value }}
{% endfor %}
{% endif %}

[Install]
WantedBy=multi-user.target