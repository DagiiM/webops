[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]

[project]
name = "webops-cli"
description = "WebOps CLI - Command-line interface for managing WebOps deployments"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Douglas Mutethia", email = "developer@eleso.solutions"},
]
maintainers = [
    {name = "Douglas Mutethia", email = "developer@eleso.solutions"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.10"
dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "requests>=2.31.0",
    "PyYAML>=6.0",
    "jinja2>=3.1.0",
    "python-decouple>=3.8",
    "cryptography>=41.0.0",
    "websockets>=11.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.3.0",
    
    # Linting and Formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # Type checking
    "pyright>=1.1.300",
    
    # Complexity analysis
    "radon>=6.0.0",
    "xenon>=0.9.0",
    
    # Security
    "semgrep>=1.40.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    
    # Development tools
    "pre-commit>=3.3.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.3.0",
    "pytest-xdist>=3.3.0",  # For parallel test execution
    "pytest-timeout>=2.1.0",  # For test timeouts
]

[project.urls]
Homepage = "https://github.com/dagiim/webops"
Documentation = "https://docs.webops.dev"
Repository = "https://github.com/dagiim/webops.git"
"Bug Tracker" = "https://github.com/dagiim/webops/issues"
"Release Notes" = "https://github.com/dagiim/webops/releases"

[project.scripts]
webops = "webops_cli.cli:main"

[project.entry-points."console_scripts"]
webops-admin = "webops_cli.admin:main"
webops-system = "webops_cli.system:main"

# CLI Configuration
[tool.cli]
name = "webops"
help = "WebOps Command Line Interface"

[tool.setuptools.packages.find]
where = ["."]
include = ["webops_cli*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.j2", "*.sh", "*.txt", "*.md"]

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*", "*/node_modules/*"]

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=webops_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--cov-branch",
    "--cov-branch-coverage",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-related",
    "api: marks tests as API-related",
    "cli: marks tests as CLI-related",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage Configuration
[tool.coverage.run]
source = ["webops_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Mypy Configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls
]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests.py"]

# Pylint Configuration
[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
    "R0801",  # duplicate-code
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 50

# Radon Configuration
[tool.radon.complexity]
target = "B"
exclude = "*/tests/*,*/test_*.py"

[tool.radon.others]
target = "B"
exclude = "*/tests/*,*/test_*.py"